//PBToolbyLuke();
global proc PBToolbyLuke(){

    string $window;
    string $pbt;
    
	if (`window -exists pbt`)
		deleteUI -window pbt;
	$window=`window -title "PBToolbyLuke" -h 30 -w 120 -rtf 1 -s 1 pbt`;

    	frameLayout -label "";   	    
			button -label "quickPB" -bgc 0.8 0.8 0.7 -c "quickPBbyLuke();";
			button -label "batch quickPB" -bgc 0.5 0.1 0.5 -c "batchPBbyLukeHub();";			
			setParent ..; 

    	frameLayout -label "";   	    
			button -label "quad View PB" -bgc 0.8 0.8 0.7 -c "$sn=combine4ViewPBbyLuke();";
			button -label "batch quad View PB" -bgc 0.5 0.1 0.1 -c "batchPB4ViewbyLukeHub();";				
			setParent ..;
			
	showWindow pbt;
	}			
	
global proc batchPBbyLukeHub(){
    string $sn = `file -q -sn`;
    string $dir = `match "^.*/" $sn`;
    batchPBbyLuke($dir);
	print "It's feeling good~ Right?";
    }

//$dir="X:/Art/1_Assets/3_Animation/MAYA/camera.mb";	
global proc batchPBbyLuke(string $dir){
    string $stuffInFolder[]= `getFileList -fld $dir`;
    string $temps[];
    string $fileN; 
    string $mb="*.mb";   
    for($fileN in $stuffInFolder){
        if(`gmatch $fileN $mb`){    
            //print ($fileN+"\n");
	          $temps=stringArrayCatenate($temps,{$fileN});
            }
        }
 
    for($fileN2 in $temps){
        file -f -new;          
        file -open ($dir+$fileN2);        
        quickPBbyLuke();   
        } 
               
    }
    
global proc quickPBbyLuke(){
    //refresh -suspend 1;
    string $sn = `file -q -sn`;
    //$modelPanels=getActiveModelPanels()  
    $mP="modelPanel4";   
    doSwitchPanes(1, { "single",$mP});    
    setPanelforPB($mP);
    $cam=setPBcamera("X:/Art/1_Assets/3_Animation/MAYA/camera.mb","persp2");
    modelEditor -e -camera $cam $mP;    
    camera -e -displayResolution off -displayFilmGate off -overscan 1.3 $cam; 
    $sn=$sn+"ChangeFormat";
    $mov=`substitute ".mbChangeFormat" $sn ".mov"`;
    playblast  -format qt -filename $mov -forceOverwrite  -sequenceTime 0 -clearCache 1 -viewer 0 -showOrnaments 0 -offScreen  -fp 4 -percent 100 -compression "H.264" -quality 100 -widthHeight 960 540;
    //refresh -suspend 0;
    }   

global proc batchPB4ViewbyLukeHub(){
    string $sn = `file -q -sn`;
    string $dir = `match "^.*/" $sn`;
    batchPB4ViewbyLuke($dir);
	  print "It's feeling good~ Right?";
    }
	
global proc batchPB4ViewbyLuke(string $dir){
    string $stuffInFolder[]= `getFileList -fld $dir`;
    string $temps[];
    string $fileN; 
    string $mb="*.mb";   
    for($fileN in $stuffInFolder){
        if(`gmatch $fileN $mb`){    
            //print ($fileN+"\n");
	          $temps=stringArrayCatenate($temps,{$fileN});
            }
        }
    //print $temps;        
    for($fileN2 in $temps){
        file -f -new;          
        file -open ($dir+$fileN2);        
        combine4ViewPBbyLuke();   
        }                
    }
    
global proc string combine4ViewPBbyLuke(){
    $camRef="X:/Art/1_Assets/3_Animation/MAYA/camera.mb";
    $persps={"persp1","persp2","persp3","persp4"};
	
    $minTime = `playbackOptions -q -minTime`; 
    $maxTime = `playbackOptions -q -maxTime`; 
    string $sn = `file -q -sn`;
    $sn=$sn+"ChangeFormat";
    $base=`substitute ".mbChangeFormat" $sn ""`;    
    $mov=`substitute ".mbChangeFormat" $sn ".mov"`;    
	$dir = `match "^.*/" $sn`;
    $file = `match "[^/\\]*$" $base`;	  
    $exportN=($dir+"temp/"+$file+"_pb.mb");
    $pbBase=($dir+"temp/"+$file);    
    select -r "persp";    
    file -force -options "v=0;" -typ "mayaBinary" -pr -es $exportN;

    //$mPs=getActiveModelPanels()  
    $mP="modelPanel4";

    quickPB4ViewbyLuke($pbBase,$camRef,$mP,$persps);
    		
	file -f -new;
	file -rename $exportN; 
	currentUnit -t "ntsc";		    
	modelEditor -e -grid false modelPanel4; 
	modelEditor -e -grid false modelPanel3; 
	modelEditor -e -grid false modelPanel2;
	modelEditor -e -grid false modelPanel1;	
    $timeRange=($maxTime-$minTime)+1;
    playbackOptions -e -minTime $minTime;
    playbackOptions -e -maxTime (($timeRange*3)+$minTime-1);
    $outTime="time1.outTime";
    $cod=reapeatCondtion($file,$outTime,$timeRange,2);  
    //connectAttr -f ($cod+".outColorR") ($ip4+".frameExtension");  		
    for($persp in $persps){	
        $ip=crMovieImagePlane(($dir+"temp/"+$file+"_"+$persp+".mov"),$persps);
        connectAttr -f ($cod+".outColorR") ($ip+".frameExtension");     
        } 
    select -cl  ;               
		file -save -type "mayaBinary";    
    playblast  -format qt -filename $mov -forceOverwrite  -sequenceTime 0 -clearCache 1 -viewer 0 -showOrnaments 1 -offScreen  -fp 4 -percent 100 -compression "H.264" -quality 100 -widthHeight 1920 1080;
			
  		return $sn;	  
    }  
  
global proc quickPB4ViewbyLuke(string $base,string $camRef,string $mP,string $persps[]){
    string $cam;
    doSwitchPanes(1, { "single",$mP});    
    setPanelforPB($mP);

    for($obj in $persps){
        $cam=setPBcamera($camRef,$obj);
        modelEditor -e -camera $cam $mP;    
        camera -e -displayResolution off -displayFilmGate off -overscan 1.3 $cam; 
        $mov=($base+"_"+$obj+".mov");
        playblast  -format qt -filename $mov -forceOverwrite  -sequenceTime 0 -clearCache 1 -viewer 0 -showOrnaments 1 -offScreen  -fp 4 -percent 100 -compression "H.264" -quality 100 -widthHeight 960 540;
        }
    }   

global proc string crMovieImagePlane(string $dir,string $persps[]){
//reference:C:/Program Files/Autodesk/Maya2023/scripts/others/importMovieImagePlane.mel
    $newImagePlane=createImagePlane("perspShape");
    setAttr ($newImagePlane[1] + ".type") 2;
    setAttr ($newImagePlane[1] + ".useFrameExtension") 1;			
    setAttr ($newImagePlane[1] + ".imageName") -type "string" $dir; 	
    
    int $pixmapSize[] = `imagePlane -q -iz $newImagePlane[1]`;
    float $width = (float)$pixmapSize[0] / 200;
    imagePlane -e -w $width $newImagePlane[1];	

    $sizeX=`getAttr ($newImagePlane[1] + ".sizeX")`;
    $sizeY=`getAttr ($newImagePlane[1] + ".sizeY")`;
    setAttr ($newImagePlane[1] + ".sizeX") ($sizeX/2); 
    setAttr ($newImagePlane[1] + ".sizeY") ($sizeY/2); 
    
    if(`gmatch $dir "*_persp1.mov"`){
        setAttr ($newImagePlane[1]+".offsetX") ($sizeX/-4);
        setAttr ($newImagePlane[1]+".offsetY") 0.2;
    }else if(`gmatch $dir "*_persp2.mov"`){
        setAttr ($newImagePlane[1]+".offsetX") ($sizeX/4);
        setAttr ($newImagePlane[1]+".offsetY") 0.2;
    }else if(`gmatch $dir "*_persp3.mov"`){
        setAttr ($newImagePlane[1]+".offsetX") ($sizeX/-4);
        setAttr ($newImagePlane[1]+".offsetY") -0.2;
    }else if(`gmatch $dir "*_persp4.mov"`){
        setAttr ($newImagePlane[1]+".offsetX") ($sizeX/4);
        setAttr ($newImagePlane[1]+".offsetY") -0.2;
    }   
    // 
    // Sync maya time with the Movie Image Plane time.
    // Without those lines, the movie time is always 1 frame behind
    // maya time. (SEE MAYA-75400)
    //
    int $animationStartTime = `playbackOptions  -q -animationStartTime`;
    int $frameOffset = (1-$animationStartTime);
    int $minAnimationStartTime = min(0, $animationStartTime);
    setAttr ($newImagePlane[1] + ".frameIn") $minAnimationStartTime;                        
    setAttr ($newImagePlane[1] + ".frameOffset") $frameOffset;
    return $newImagePlane[1];
    }
    
global proc string[] getActiveModelPanels(){
    string $modelPanels[];
    string $panel;
    $visPanel=`getPanel -vis`;
    for($panel in $visPanel){
        if(`getPanel -to $panel`=="modelPanel"){
            $modelPanels=stringArrayCatenate($modelPanels, {$panel});
            }    
        }   
    return $modelPanels;
    }

global proc string setPBcamera(string $dir,string $persp){
    string $nSs[];
    string $ref;	
    $refs=`file -q -r`;
    $ck=0;
    for($ref in $refs){
        if(`gmatch $ref $dir`){ 
            $ck=1;               
            }
        } 
    if($ck==0)file -r -namespace "camera" -options "v=0;" $dir;
    $rfn=`file -q -rfn $dir`;
    $ns=`referenceQuery -namespace $rfn`;  
    $cam=($ns+":"+$persp);
    return $cam;
    }
    
global proc setPanelforPB(string $modelPanel){   
    DisplayShadedAndTextured;
    modelEditor -e -allObjects 0 $modelPanel;
    modelEditor -e -pm 1 $modelPanel;
    modelEditor -e -hud 1 $modelPanel;  
    enableIsolateSelect $modelPanel 0;
    isolateSelect -state 0 $modelPanel;      
    setFrameRateVisibility 0;
    setPolyCountVisibility 0;
    setCameraNamesVisibility 0;
    setCapsLockVisibility 0;    
    setCurrentFrameVisibility 1; 
    setViewAxisVisibility 0;   
    setAttr hardwareRenderingGlobals.multiSampleEnable 1;
    }

global proc string reapeatCondtion(string $file,string $outTime,int $timeRange,int $n){
    	$n=$n-1;
    if($n==0){
        $minus=`createNode -n ("plusMinusAverage"+$n+"_"+$file) "plusMinusAverage"`;
        $cod=`createNode -n ("condition"+$n+"_"+$file) "condition"`;    
        setAttr ($minus+".input1D[1]") $timeRange;
        setAttr ($minus+".operation")2;   
        setAttr ($cod+".operation") 2; 
        setAttr ($cod+".secondTerm") $timeRange; 
        connectAttr -f $outTime ($minus+".input1D[0]");         
        connectAttr -f $outTime ($cod+".colorIfFalseR");
        connectAttr -f $outTime ($cod+".firstTerm");    
        connectAttr -f ($minus+".output1D") ($cod+".colorIfTrueR");                
   	    return $cod;
    }else{ 	
        $minus=`createNode -n ("plusMinusAverage"+$n+"_"+$file) "plusMinusAverage"`;
        $cod=`createNode -n ("condition"+$n+"_"+$file) "condition"`;    
        setAttr ($minus+".input1D[1]") $timeRange;
        setAttr ($minus+".operation")2;   
        setAttr ($cod+".operation") 2; 
        setAttr ($cod+".secondTerm") $timeRange; 
        connectAttr -f $outTime ($minus+".input1D[0]");         
        connectAttr -f $outTime ($cod+".colorIfFalseR");
        connectAttr -f $outTime ($cod+".firstTerm");    
        connectAttr -f ($minus+".output1D") ($cod+".colorIfTrueR");
        $outCondition=($cod+".outColorR");
        $cod=reapeatCondtion($file,$outCondition,$timeRange,$n);	        
   	    return $cod;        
        }  
    }
	

 	