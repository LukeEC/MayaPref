dingdingTool;

global proc dingdingTool(){
    global string $anchors[];
    string $window;
    string $ddt;
    
	if (`window -exists ddt`)
		deleteUI -window ddt;
	$window=`window -title "dingdingTool" -h 30 -w 120 -rtf 1 -s 1 ddt`;

	frameLayout -label "just ding ding" ;
		rowColumnLayout -nc 2 -cw 1 100 -cw 2 100;
		checkBox -l "position" -v 1 swP;
		checkBox -l "rotation" -v 1 swR;
		setParent..;		
        button -label "ding" -bgc 0.5 0.2 0.3 -c "$dings=crDings();";
        button -label "ding" -bgc 0.3 0.5 0.2 -c "alignDings($dings);";   
    	setParent ..;	
	frameLayout -label "combo" -cll 1 -cl 1;
    	frameLayout -label "spaceSwitchDing" ;
			textFieldButtonGrp -label "attribute:"
			-buttonLabel "Choose" -columnWidth3 50 90 46
			-adjustableColumn3 2 -columnAlign 3 "left"
			-buttonCommand "queryAttributeForSpace($gChannelBoxName)" spaceTFG;
			
        	rowColumnLayout -nc 2 -cw 1 100 -cw 2 100;
            intFieldGrp -label "space:" -v1 0 -columnWidth 1 40 -columnWidth 2 20 spaceIFG;			
            button -label "ding" -bgc 0.3 0.5 0.2 -c "int $mod[] =`intFieldGrp -q -v spaceIFG`; string $attr=`textFieldButtonGrp -q -text spaceTFG`;batchSwitchSpaceDing($mod[0],$attr);";  
        	setParent ..;     
		setParent ..; 
		
    	frameLayout -label "snapStepDing" ;
        	rowColumnLayout -nc 1 -cw 1 60 ;
            button -label "ding" -bgc 0.3 0.5 0.2 -c "batchSnapStepDing 0";  
            button -label "bake ding" -bgc 0.3 0.5 0.2 -c "batchSnapStepDing 1"; 
            setParent ..;  			
        setParent ..; 
		
    	frameLayout -label "MovingDings" ;
			button -label "dings" -bgc 0.5 0.2 0.3 -c "$sels=`ls -sl`;$dings=crMotionDings($sels);";
			button -label "dings" -bgc 0.3 0.5 0.2 -c "alignMotionDings($sels);select -r $sels;"; 
			setParent ..;     
	
    	frameLayout -label "collapseDing" ;
        	rowColumnLayout -nc 2 -cw 1 60 -cw 2 60;
            button -label "handR" -bgc 0.3 0.5 0.2 -c "collapseHandAttrForJUR \"R\"";  
            button -label "handL" -bgc 0.3 0.5 0.2 -c "collapseHandAttrForJUR \"L\"";  		
            button -label "legR" -bgc 0.3 0.5 0.2 -c "collapseLegIKAttrForJUR \"R\"";   
            button -label "legL" -bgc 0.3 0.5 0.2 -c "collapseLegIKAttrForJUR \"L\"";  
			
            setParent ..;  			
        setParent ..;     	
	showWindow ddt;
	}

global proc queryAttributeForSpace(string $gChannelBoxName){
	$attr=`channelBox -q -sma $gChannelBoxName`;
	if(`size($attr)`==1){
		print $attr;
		textFieldButtonGrp -e -tx $attr[0] spaceTFG;
	}else{
		print "請選一個參數!!!";
		}
	}
	
global proc string[] crDings(){
    string $dings[];
    $sels=`ls -sl`;
    
    if (!`size($sels)`){
        print("select somthing");
    }else{
        for($i=0;$i<`size($sels)`;$i++){
            $dings[$i]=crDing($sels[$i]);
            }
        select -r $sels;
        }
    return $dings;
    }

global proc alignDings(string $dings[]){    
    $sels=`ls -sl`;
	int $swP,$swR;
    if(`size($sels)`>0){
		$swP= `checkBox -q -value swP`;
		$swR= `checkBox -q -value swR`;
		
		for($i=0;$i<`size($dings)`;$i++){
			alignDing($sels[$i],$dings[$i],$swP,$swR);
			}
        }
    }                

global proc string crDing(string $obj){
    $grp="DingDingTool_grp";
	
    $ding=($obj+"_ding");
    
    if(`objExists($ding)`)
        delete $ding;
    
	
    $p=`xform -q -ws -t $obj`;
    $r=`xform -q -ws -ro $obj`;
    $s=`xform -q -ws -s $obj`;
    
    spaceLocator -n $ding;
    
    $ro=getAttr ($obj+".rotateOrder");
    setAttr ($ding+".rotateOrder") $ro;
    
    if(!`objExists($grp)`)
        group -em -n $grp;
    parent $ding $grp;
    xform -ws -t $p[0] $p[1] $p[2] $ding;
    xform -ws -ro $r[0] $r[1] $r[2] $ding;
    xform -ws -s $s[0] $s[1] $s[2] $ding;
    
	
    return $ding;
	
	
	
	
	
    }

global proc alignDing(string $obj,string $ding,int $swP, int $swR){    
    string $con[];
    
	$p=`xform -q -ws -t $ding`;
	$r=`xform -q -ws -ro $ding`;	
	$s=`xform -q -ws -s $ding`;	
	
	
	
    if(!`objExists($ding)`){
        print "anchor不見了?";
    }else{

    	setKeyframe $obj;
        $constraint =`listRelatives -typ "constraint" $obj`;
        if (`size($constraint)`>0){
            print($obj + "有約束喔\n");
        }else{
            if(`getAttr -l ($obj+".rx")`||`getAttr -l ($obj+".ry")`||`getAttr -l ($obj+".rz")`){
                print ($obj+"的旋轉有lock\n");
			}else{
				if($swR==1)		
					xform -ws -ro $r[0] $r[1] $r[2] $obj;
				}	
				
			if(`getAttr -l ($obj+".tx")`||`getAttr -l ($obj+".ty")`||`getAttr -l ($obj+".tz")`){         
				print ($obj+"的位移有lock\n");
			}else{
				if($swP==1)		
					xform -ws -t $p[0] $p[1] $p[2] $obj;
				}	
            }
        }
    }        

global proc batchSwitchSpaceDing(int $m,string $para){
    $sels=`ls -sl`;    
    float $kValue[]=`keyframe -q -timeChange -sl`;
    if (!`size($kValue)`)
        $kValue[0]=`currentTime -q`;
    floatArrayRemoveDuplicates($kValue,0);
    
    for($k in $kValue){
        currentTime $k;
        $dings=crDings();
        
        //
        for($obj in $sels){
            setAttr ($obj+"."+$para) $m;
            }
        
        alignDings($dings);
        
        }
    clear $kValue;
    }        
        
global proc batchSnapStepDing(int $b){
    $sels=`ls -sl`;
    int $anchor=`currentTime -q`;
    float $kValue[]=`keyframe -q -timeChange -sl`;
    if (!`size($kValue)`)        
        $kValue[0]=$anchor;
    floatArrayRemoveDuplicates($kValue,0);
    
    $dings=crDings();
    if(!$b){
        for($k in $kValue){
            currentTime $k;
            alignDings($dings);
            }        
    }else{
        for($i=$kValue[0];$i<$kValue[(`size($kValue)`-1)];$i++){        
            currentTime $i;
            alignDings($dings);
            }
        }
    }

	
global proc string getNameSpace(string $obj){
	string $nameSpace;
	string $buffer[];
	$numTokens=`tokenize $obj ":" $buffer`;
	if(`size $buffer`>1){
		$namespace=$buffer[0];
		}
		return $nameSpace;
	}
	
global proc collapseHandAttrForJUR(string $side){
	string $fingCtrls[]={"Hand_Finger_01_FK_01_Ctrl"};
	string $handCtrls[]={"Hand_Ctrl"};
	string $handAttrs[]={"Cone"};
	$sels=`ls -sl`;
	$nameSpace=getNameSpace($sels[0]);
	$handCtrls[0]=($nameSpace+":"+$side+"_"+$handCtrls[0]);
	for($i=0;$i<`size $fingCtrls`;$i++){
		$fingCtrls[$i]=($nameSpace+":"+$side+"_"+$fingCtrls[$i]);
		}
	
	print ($fingCtrls);
	batchCollapseHandAttr($fingCtrls,$handCtrls[0],$handAttrs);
	}

global proc batchCollapseHandAttr(string $fingCtrls[],string $handCtrl,string $handAttrs[]){
	float $kValue[]=`keyframe -q -timeChange -sl`;
	if (!`size($kValue)`)
		$kValue[0]=`currentTime -q`;
	floatArrayRemvoeDuplicates($kValue,0);
	
	for($k in $kValue){
		currentTime $k;
		select -r $fingCtrls;
		$dings=crDings();
		
		for($attr in $handAttrs){
			setAttr ($handCtrl+"."+$attr) 0;
			}
		alignDings($dings);
		}
	clear $kValue;
	}
	


global proc collapseLegIKAttrForJUR(string $side){
	string $footJt="Foot_02_01_Bn";
	
	string $legIKCtrls[]={"Leg_IK_Ctrl"};
	string $legIKAttrs[]={"ToeRock"};
	string $footVis="FootCtrlVis";
	
	$sels=`ls -sl`;
	$nameSpace=getNameSpace($sels[0]);
	$footJt=($nameSpace+":"+$side+"_"+$footJt);
	
	for($i=0;$i<`size $legIKCtrls`;$i++){
		$legIKCtrls[$i]=($nameSpace+":"+$side+"_"+$legIKCtrls[$i]);
		}
	setAttr ($legIKCtrls[0]+"."+$footVis) 1;
	print ($legIKCtrls);
	
	batchCollapseLegIKAttr($footJt,$legIKCtrls,$legIKAttrs);
	}

global proc float[] getInitFootIKOffset(string $jt,string $ct,string $legIKAttrs[],string $trans[]){
	float $offsets[];
	float $legIKattrsV[];
	
	for($i=0;$i<`size($legIKAttrs)`;$i++){
		$legIKatrrsV[$i]=`getAttr ($ct+"."+$legIKAttrs[$i])`;
		setAttr ($ct+"."+$legIKAttrs[$i]) 0;
		}
	
	select -r $ct $jt;
	$dings=crDings();
	parent $dings[0] $dings[1];
	
	for($i=0; $i<`size($trans)`;$i++){
		$offsets[$i]=`getAttr ($dings[0]+"."+$trans[$i])`;
		}
	delete $dings;

	for($i=0;$i<`size($legIKAttrs)`;$i++){
		setAttr ($ct+"."+$legIKAttrs[$i]) $legIKattrsV[$i];
		}
	return $offsets;
	}


global proc batchCollapseLegIKAttr(string $footJt, string $legIKCtrls[],string $legIKAttrs[]){
	string $trans[]={"tx","ty","tz","rx","ry","rz","sx","sy","sz"};
	float $kValue[]=`keyframe -q -timeChange -sl`;
	if (!`size($kValue)`)
		$kValue[0]=`currentTime -q`;
	floatArrayRemoveDuplicates($kValue,0);
	float $footOffset[]=getInitFootIKOffset($footJt,$legIKCtrls[0],$legIKAttrs,$trans);
	
	for($k in $kValue){
		currentTime $k;
		select -r $footJt;
		$dings=crDings();
		$jtDing=$dings[0];
		select -r $legIKCtrls;
		$dings=crDings();
		
		parent $dings[0] $jtDing;
		
		for($i=0;$i<`size($trans)`;$i++){
			setAttr ($dings[0]+"."+$trans[$i]) $footOffset[$i];
			}
			
		
		for($attr in $legIKAttrs){
			setAttr ($legIKCtrls[0]+"."+$attr) 0;
			}
		select -r $legIKCtrls;
		alignDings($dings);
		
		}
	clear $kValue;
	}

global proc string[] crMotionDings(string $sels[]){
    $ding=crDings();
    string $cons[];
    for($i=0;$i<`size($sels)`; $i++) {
        $temp=smartConstraint( $sels[$i],$ding[$i]);
        $cons=stringArrayCatenate($cons,$temp);
        }    
    fastbakeKey($ding);  
    delete $cons;    
    for($i=0;$i<`size($sels)`; $i++) {     
        $temp=smartConstraint($ding[$i],$sels[$i]);
        }
    return $ding;
    }    

global proc alignMotionDings(string $sels[]){
    float $keyTimes[]=getAniCurveKeyWithPairBlend ($sels);;   
    if(`size($keyTimes)`){           
        for($t in $keyTimes){
            currentTime $t;    
            setKeyframe -t $t -at "translate" $sels; 
            setKeyframe -t $t -at "rotate" $sels;              
            }             
        }       
    if(`objExists "DingDingTool_grp"`) delete "DingDingTool_grp";    
    }
        
global proc string[] getAniCurveWithPairBlend(string $sels[]){
    //only work with "animCurveTL" "animCurveTA"
    string $objs[]=$sels;
    $pbs=`listConnections -t "pairBlend" $sels`;
    if(`size($pbs)`){         
            $pbs=stringArrayRemoveDuplicates($pbs);
            $objs=stringArrayCatenate($objs, $pbs);
            }    
    $acT=`listConnections  -t "animCurveTL" $objs`;
    $acR=`listConnections -t "animCurveTA" $objs`;
    string $acs[]=stringArrayCatenate($acT,$acR);    
    return $acs;          
    }
    
global proc float[] getAniCurveKeyWithPairBlend(string $sels[]){
    //only work with "animCurveTL" "animCurveTA"
    string $objs[]=$sels;
    $pbs=`listConnections -t "pairBlend" $sels`;
    if(`size($pbs)`){         
            $pbs=stringArrayRemoveDuplicates($pbs);
            $objs=stringArrayCatenate($objs, $pbs);
            }    
    $acT=`listConnections  -t "animCurveTL" $objs`;
    $acR=`listConnections -t "animCurveTA" $objs`;
    
    float $keyTimes[]=`keyframe -q $acT $acR`;   
    if(`size($keyTimes)`){          
        floatArrayRemoveDuplicates($keyTimes,0);
        $keyTimes = `sort $keyTimes`;        
        } 
    return $keyTimes;          
    }    
    
global proc fastbakeKey(string $objs[]){
    $tg=getTimeRange(); 
    //refresh -suspend 1; 
    bakeResults 
    -t $tg 
    -simulation 1 
    -sampleBy 1 
    -disableImplicitControl 1 
    -preserveOutsideKeys 1 
    -sparseAnimCurveBake 0 
    -removeBakedAttributeFromLayer 0 
    -removeBakedAnimFromLayer 0 
    -bakeOnOverrideLayer 0   
    -minimizeRotation 1 
    -controlPoints 0
    -shape 0
    -at "tx" 
    -at "ty" 
    -at "tz" 
    -at "rx" 
    -at "ry" 
    -at "rz" 
    $objs;
    filterCurve;    
    //refresh -suspend 0;     
    }  
    
global proc string[] smartConstraint(string $source,string $target){
    string $temp[];
    if(`getAttr -l ($target+".rotateX")`||`getAttr -l ($target+".rotateY")`||`getAttr -l ($target+".rotateZ")`){     
        $temp=`pointConstraint $source $target`;
    }else if(`getAttr -l ($target+".translateX")`||`getAttr -l ($target+".translateY")`||`getAttr -l ($target+".translateZ")`){     
        $temp=`orientConstraint $source $target`;        
    }else{
        $temp=`parentConstraint $source $target`;        
        }
    return $temp;   
    }        
	
global proc string getTimeRange() {
    $minTime = `playbackOptions -q -minTime`; 
    $maxTime = `playbackOptions -q -maxTime`; 
    string $tg=($minTime+":"+$maxTime); 
    return $tg;
    }	