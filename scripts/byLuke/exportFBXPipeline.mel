//exportAniFBXTool();
global proc exportAniFBXTool(){

    string $window;
    string $eaft;
    
	if (`window -exists eaft`)
		deleteUI -window eaft;
	$window=`window -title "exportAniFBXTool" -h 30 -w 120 -rtf 1 -s 1 eaft`;

    	frameLayout -label "exportAniFBX";   	    
			button -label "export Ani fbx" -bgc 0.3 0.5 0.2 -c "$sn=`file -q -sn`;exportAniFBX(0);file -f -new;file -open $sn; ";
			setParent ..; 
			
	frameLayout -label "" -cll 1 -cl 1;
        	frameLayout -label "Evil_Tool";
  	
			button -label "batch export Ani fbx" -bgc 0.5 0.2 0.3 -c "batchExportAniFBXHub();";
			button -label "refresh suspend" -bgc 0.3 0.5 0.2 -c "refresh -suspend 0;";	
            button -label "batch transfer Ma to Mb" -bgc 0.5 0.2 0.3 -c "changeMAtoMB();"; 					
            setParent ..;  	
    	setParent ..;			
        setParent ..;     	
	showWindow eaft;
	}
	

global proc changeMAtoMB(){
    string $sn = `file -q -sn`;
    string $dir = `match "^.*/" $sn`;
    string $stuffInFolder[]= `getFileList -fld $dir`; 
    string $fileN; 
    string $ma="*.ma";       
    for($fileN in $stuffInFolder){
        if(`gmatch $fileN $ma`){    
            //print ($fileN+"\n");
            file -f -new; 
            file -open ($dir+$fileN);                             
            file -save -type "mayaBinary";               
            }
        }    
    }



global proc string[] setAniExportSets(){ 
    $refs=`file -q -r`;
    $ns=getNameSapceFromReferenceObject();
    string $expSets[];
    if(!`objExists "export_sets"`) sets -em -n "export_sets";

    //$n=$ns[3];
    for($n in $ns){   
        if ($n!=":"){
            $obj=($n+":DeformationSystem");
            if(`objExists $obj`){
                $set=($n+"_set");      
                if(`objExists $set`) delete $set;   
                $ch=`listRelatives -c $obj`;                             
                sets -n $set $ch;  
                sets -add "export_sets" $set;
                $expSets=stringArrayCatenate($expSets,{$set});    
                }      
        }else{
            $obj="DeformationSystem";
            if(`objExists $obj`){  
                $pa=`listRelatives -p $obj`; 
                $set=($pa[0]+"_set");
                if(`objExists $set`) delete $set; 
                $ch=`listRelatives -c $obj`;                                               
                sets -n $set $ch;  
                sets -add "export_sets" $set;
                $expSets=stringArrayCatenate($expSets,{$set});              
                }           
            }
        }
    return $expSets;        
    }

global proc toZero(string $obj){     
    move -ws -a 0 0 0 $obj;
    rotate -ws -a 0 0 0 $obj;
    scale -ws -a 1 1 1 $obj;
    setAttr ($obj+".visibility") 1;	
    cutKey $obj;
    }  	

//batchExportAniFBXHub();
global proc batchExportAniFBXHub(){
    string $sn = `file -q -sn`;
    string $dir = `match "^.*/" $sn`;
    batchExportAniFBX($dir);
	print "It's feeling good~ Right?";
    }
	
global proc batchExportAniFBX(string $dir){
    string $stuffInFolder[]= `getFileList -fld $dir`;
    string $fileN; 
    string $mb="*.mb";
    string $exp="*_export*";    
    for($fileN in $stuffInFolder){
        if(`gmatch $fileN $mb`&&!`gmatch $fileN $exp`){    
            //print ($fileN+"\n");
            file -f -new;          
            file -open ($dir+$fileN);        
            exportAniFBX(1); 
            }
        }
    }

global proc exportAniFBX(int $mode){
    string $sn = `file -q -sn`;
    string $dir = `match "^.*/" $sn`;
    string $fileN = `file -q -sn -shn`;
    $fileN=substring($fileN, 0, size($fileN) - 7);

    string $buffer[];
    $numTokens = `tokenize $fileN "_" $buffer`;
    //print $buffer;
    if(`size $buffer[5]`) $buffer[4]=$buffer[4]+"_"+$buffer[5];
    $fbxChara=($buffer[0]+"_"+$buffer[1]+"_"+$buffer[2]+"_"+$buffer[3]+"_"+$buffer[4]+".fbx");
    
	//60fps
	//currentUnit -t "ntscf";
	
    refresh -suspend 1;   
	$expSets=setAniExportSets();	
    ImportRefAndDeleteNameSpace();
    
    sysFile -makeDir ($dir+"temp");
    $exportN=($dir+"temp/"+$fileN+"_export.mb");
    file -rename $exportN; 
    file -save -type "mayaBinary";
    
        
    //�ݭnsets �n��X�����[
    select -r "export_sets";
    $bakeSets=`ls -sl`;
    float $minTime = `playbackOptions -q -minTime`;
    float $maxTime = `playbackOptions -q -maxTime`;
    bakeResults -simulation true -t ($minTime+":"+$maxTime) -hierarchy below -sampleBy 1 -oversamplingRate 1 -disableImplicitControl true -preserveOutsideKeys true -sparseAnimCurveBake false -removeBakedAttributeFromLayer false -removeBakedAnimFromLayer false -bakeOnOverrideLayer false -minimizeRotation true -controlPoints false -shape true $bakeSets;
	
    //euler filter
    select -hi "*DeformationSystem";
    filterCurve `ls -sl`;
    selectKey -clear ;
    /*	
    setKeyframe -breakdown true "DeformationSystem.sx";
    setKeyframe -breakdown true "DeformationSystem.sy";
    setKeyframe -breakdown true "DeformationSystem.sz";

    cutKey -t ":" -f ":" -at "tx" -at "tz" "Root_M";    
    setAttr "Root_M.translateX" 0;
    setAttr "Root_M.translateZ" 0;
    */ 
	
	//set fbx dir
    $fbxDir=$fbxDirCloak=$fbxDirWeapon=$dir; 
    if($mode==1){
        $fbxDir = `substitute "/MAYA/" $dir "/FBX/"`;         
        $fbxDirCloak=($fbxDir+"Attachments/Cloak/");
        $fbxDirWeapon=$fbxDir+"Attachments/Weapon/";  
        sysFile -makeDir $fbxDir;                      
        } 
              

	$Acss={"Cloak","Weapon","WeaponB"};
	for($set in $expSets){      
		if (`sets -am $set "Root_M"`){
			select -r $set;
			file -force -options "v=0;" -typ "FBX export" -pr -es ($fbxDir+$fbxChara);
			}
		for($i=0;$i<`size($Acss)`; $i++) {
			$root=($Acss[$i]+"Root");
			$fbxDirAcs=$fbxDir;
			if(`objExists $root`){ 
				if (`sets -am $set $root`){
					if($Acss[$i]=="Cloak") $fbxDirAcs=$fbxDirCloak;
					if($Acss[$i]=="Weapon") $fbxDirAcs=$fbxDirWeapon;  
					if($Acss[$i]=="WeaponB")$fbxDirAcs= $fbxDirWeapon;
					if($Acss[$i]=="Cloak"||`objExists "SK_Player_Weapon_Bow_001"`){         
						$fbxAcs=($buffer[0]+"_"+$buffer[1]+"_"+$buffer[2]+"_"+$Acss[$i]+"_"+$buffer[3]+"_"+$buffer[4]+".fbx");            
						sysFile -makeDir $fbxDirAcs;        
						toZero($root);    
						select -r $root;
						file -force -options "v=0;" -typ "FBX export" -pr -es ($fbxDirAcs+$fbxAcs);
						}
					}
				}               
			}
		}
		
	//30fps		
	//currentUnit -t "ntsc";   
	
    refresh -suspend 0; 
    print "working successful!!";
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//exportRigTool();
global proc exportRigTool(){

    string $window;
    string $ert;
    
    if (`window -exists ert`)
        deleteUI -window ert;
    $window=`window -title "exportRigTool" -h 50 -w 180 -rtf 1 -s 1 ert`;
          	
    frameLayout -label "exportRigFBX" ;
    //setParent..;		

    rowColumnLayout -nc 3 -cw 1 80 -cw 2 80 -cw 3 80;

    checkBox -l ".mb" -v 1 swMb;
    checkBox -l ".fbx" -v 1 swFbx;
    checkBox -l "reOpen" -v 0 swReOpen;
    setParent..;
    columnLayout;
    rowColumnLayout -numberOfColumns 1 -columnWidth 1 240;
    button -label "record camera position" -bgc 0.3 0.5 0.2 -c "crPerspAnchor();"; 
    button -label "set export set" -bgc 0.3 0.5 0.2 -c "setRigExportSet();";    
    button -label "set delete set" -bgc 0.3 0.5 0.2 -c "setDeleteSet();";   
    button -label "set down to DeformationSystem set" -bgc 0.3 0.5 0.2 -c "setDownToDSset();"; 
    setParent..;           
    rowColumnLayout -nc 3 -cw 1 100 -cw 2 40 -cw 3 100;
    button -label "create Main1 label" -w 50 -bgc 0.3 0.5 0.2 -c "crMainExtraLabel();";  
    separator -style "none";
    button -label "delete Main1 label" -w 50 -bgc 0.5 0.2 0.2 -c "if(`objExists \"duplicate_Main\"`)delete \"duplicate_Main\";";
    setParent..; 
    setParent ..;	
    frameLayout  -label "export";  
    
    button -label "Rig export" -bgc 0.2 0.2 0.5 -c "$sn=exportRig();";
    setParent ..;	       
    frameLayout  -label "" -cll 1 -cl 1;    	
    button -label "reOpen" -bgc 0.2 0.2 0.5 -c "file -f -new;file -open $sn;";     		
    button -label "refresh -suspend 0" -bgc 0.2 0.2 0.5 -c "refresh -suspend 0;"; 
    setParent ..;     	
    showWindow ert;
    }
	
	
global proc replaceRef(string $RN,string $rfDir){
    string $sn = `file -q -sn`;
    string $dir = `match "^.*/" $sn`;
    string $stuffInFolder[]= `getFileList -fld $dir`; 
           
    for($fileN in $stuffInFolder){
        if(`gmatch $fileN "*.ma"`){    
            //print ($fileN+"\n");
            file -f -new; 
            file -open ($dir+$fileN);    
            file -loadReference $RN -type "mayaBinary" -options "v=0;" $rfDir;
            file -save -type "mayaBinary";               
            }
        }    
    }	
	

global proc string getChara(string $sel){
    string $charas[];
	
    if(`gmatch $sel "*:*"`){
        $temp=`tokenize $sel ":" $charas`;
        print($charas);
        return ($charas[0]+":");        
    }else{
        return "";
        }
    }
	
global proc string[] getNameSapceFromReferenceObject(){
    $refs=`file -q -r`;
    string $nSs[];
	string $ref;	
    for($ref in $refs){
        if(`gmatch $ref "*.mb"`||`gmatch $ref "*.ma"`){        
            $rfn=`file -q -rfn $ref`;
            $nns[0]=`referenceQuery -namespace $rfn`;
            $nSs=stringArrayCatenate($nSs,$nns);
            }
        }
    return $nSs;
    }
  
global proc ImportRefAndDeleteNameSpace(){ 
    $refs=`file -q -r`;
    $ns=getNameSapceFromReferenceObject();
          
    for($ref in $refs){
        file -importReference $ref;
        } 
        
    for($n in $ns){   
        if ($n!=":"){
            namespace -mergeNamespaceWithRoot -removeNamespace $n;        
            }
        }
    }
global proc setDeleteSet(){ 
    $sels=`ls -sl`;

    if(`size $sels`){

        if(!`objExists "delete_set"`) sets -n "delete_set";
        if(`objExists "delete_set"`) sets -add "delete_set" $sels;
    }else{
        print "select geo you want to set";
        }
    }
global proc setDownToDSset(){ 
    $sels=`ls -sl`;

    if(`size $sels`){

        if(!`objExists "down_to_DeformationSystem_set"`) sets -n "down_to_DeformationSystem_set";
        if(`objExists "down_to_DeformationSystem_set"`) sets -add "down_to_DeformationSystem_set" $sels;
    }else{
        print "select geo you want to set";
        }
    }        
global proc setRigExportSet(){ 
    $sels=`ls -sl`;
    $text="nameWhat";
    if(`size $sels`){
        $text=inputString();
        if(!`objExists "export_sets"`) sets -em -n "export_sets";
        if(!`objExists ($text+"_set")`) sets -n ($text+"_set");
        sets -add "export_sets" ($text+"_set");
    }else{
       print "select geo you want to set";
    }
    }
global proc string inputString(){        
    string $text;
    string $result = `promptDialog
        -title ""
        -message "Enter Name:"
        -button "OK" -button "Cancel"
        -defaultButton "OK" -cancelButton "Cancel"
        -dismissString "Cancel"`;
    
    if ($result == "OK") {
        $text = `promptDialog -query -text`;
    }
    return $text;
    }	
global proc OrganizeForExportRig(){

	if(`objExists "ElbowPart1_R"`) parent "Wrist_R" "Elbow_R";
	if(`objExists "ElbowPart1_L"`) parent "Wrist_L" "Elbow_L";	
	
	if(`objExists "down_to_Main"`){
		$childs=`listRelatives -f -c "down_to_Main"`;
		for($ch in $childs){
			parent $ch "Main";
			}
		}

	if(`objExists "down_to_MotionSystem"`){
		$childs=`listRelatives -f -c "down_to_MotionSystem"`;
		for($ch in $childs){
			parent $ch "MotionSystem";
			}
		}
		
	if(`objExists "down_to_FKSystem"`){
		$childs=`listRelatives -f -c "down_to_FKSystem"`;
		for($ch in $childs){
			parent $ch "FKSystem";
			}
		}
		
	if(`objExists "down_to_DeformationSystem"`){
		$childs=`listRelatives -f -c "down_to_DeformationSystem"`;
		for($ch in $childs){
			parent $ch "DeformationSystem";
			}
		}  
		
	if(`objExists "down_to_DeformationSystem_set"`){
		$childs=`sets -q "down_to_DeformationSystem_set"`;
		for($ch in $childs){
			parent $ch "DeformationSystem";
			}
		}  		  
	if(`objExists "down_to_Chest_M"`){
		$childs=`listRelatives -f -c "down_to_Chest_M"`;
		for($ch in $childs){
			parent $ch "Chest_M";
			}
		}        
		
	if(`objExists "down_to_Head_M"`){
		$childs=`listRelatives -f -c "down_to_Head_M"`;
		for($ch in $childs){
			parent $ch "Head_M";
			}
		}       
    //delete temp object;			
    if(`objExists "delete_after_export"`) delete "delete_after_export";   
    if(`objExists "delete_set"`)  delete `sets -q "delete_set"`;     

  

    //delete layer
    $displayLayers=`ls -type "displayLayer"`;
    $displayLayersRemoves={"defaultLayer"};
    $displayLayers= stringArrayRemove($displayLayersRemoves, $displayLayers);
    if (`size $displayLayers`) delete $displayLayers;

    //delete unused node
    hyperShadePanelMenuCommand("", "deleteUnusedNodes");
    }

global proc advCleanUpForExportRig(){
    source "Advance/AdvancedSkeleton5.mel";
	if(`objExists "Main"`) $s=`xform -q -s "Main"`;      
    if(`objExists "Root_M"`&&`objExists "Sets"`){
		//delete adv Key
		//asMCLRemoveBody "";
		//hide adv jt
		asJointsVisibility 0;
		//go to adv bind pose
		asGoToBuildPose bodySetup;
		}

        
    //delete unused node
    hyperShadePanelMenuCommand("", "deleteUnusedNodes");
    //delete unused skin weight
    //asRemoveAllUnusedInfluences;
	
    if (`objExists FaceControlSet`) asGoToBuildPose faceSetup;
    	if(`objExists "Main"`) scale -a $s[0] $s[1] $s[2] "Main";        
    }
global proc DeleteMotionSystembyLuke (){
    string $tempString[];
    string $trs[]={"t","r","s"};
    string $xyz[]={"x","y","z",""};
    string $DeformationSystemNodes[]=`listRelatives -f -ad -type transform "DeformationSystem"`;
    
    if (!`objExists MotionSystem`){
    	error "MotionSystem not found";
    }else{
        if (`objExists AngleSystem`)
        	parent AngleSystem Main;
        
        for ($x=0;$x<size($DeformationSystemNodes);$x++)
        	for ($y=0;$y<size($trs);$y++)
        		for ($z=0;$z<size($xyz);$z++)
        			{
        			$plug=$DeformationSystemNodes[$x]+"."+$trs[$y]+$xyz[$z];
        			$tempString=`listConnections -s 1 -d 0 -p 1 $plug`;
        			for ($i=0;$i<size($tempString);$i++)
        				disconnectAttr $tempString[$i] $plug;
        			}
        if (`objExists MainScaleMultiplyDivide`)
        	delete MainScaleMultiplyDivide;
        delete MotionSystem;
        
        print "// MotionSystem deleted.\n";
        }
    }
global proc crAdvMainSecCtrl(){
    if(!`objExists "Main1"`){
        duplicateCurve -n "Main1" "MainShape";
        scale -r -ocp 1.618 1.618 1.618 "Main1Shape.cv[*]";        
        if (`attributeExists "fkVis" "Main1"`) deleteAttr -attribute "fkVis" "Main1";
        if (`attributeExists "ikVis" "Main1"`)deleteAttr -attribute "ikVis" "Main1";
        if (`attributeExists "fkIkVis" "Main1"`)deleteAttr -attribute "fkIkVis" "Main1";
        if (`attributeExists "aimVis" "Main1"`)deleteAttr -attribute "aimVis" "Main1";
        if (`attributeExists "aimFKVis" "Main1"`)deleteAttr -attribute "aimFKVis" "Main1";
        if (`attributeExists "aimLRVis" "Main1"`)deleteAttr -attribute "aimLRVis" "Main1";
        if (`attributeExists "fingerVis" "Main1"`)deleteAttr -attribute "fingerVis" "Main1";
        if (`attributeExists "bendVis" "Main1"`)deleteAttr -attribute "bendVis" "Main1";
        if (`attributeExists "arrowVis" "Main1"`)deleteAttr -attribute "arrowVis" "Main1";
        if (`attributeExists "drvSysVis" "Main1"`)deleteAttr -attribute "drvSysVis" "Main1";
        if (`attributeExists "jointVis" "Main1"`)deleteAttr -attribute "jointVis" "Main1";
        if (`attributeExists "primaryAxis" "Main1"`)deleteAttr -attribute "primaryAxis" "Main1";
        if (`attributeExists "secondaryAxis" "Main1"`)deleteAttr -attribute "secondaryAxis" "Main1";
        if (`attributeExists "worldmatch" "Main1"`)deleteAttr -attribute "worldmatch" "Main1";
        if (`attributeExists "mirTrans" "Main1"`)deleteAttr -attribute "mirTrans" "Main1";
    
        //if (`attributeExists "height" "Main1"`)deleteAttr -attribute "height" "Main1";
        //if (`attributeExists "version" "Main1"`)deleteAttr -attribute "version" "Main1";
        $parent=`listRelatives -p "Main"`;
        parent "Main1" $parent[0];
        parent "Main" "Main1";

		if(`objExists "MainScaleMultiplyDivide"`)connectAttr -f Main1.scale MainScaleMultiplyDivide.input2;
        }
    }
	

	

global proc crMainExtraLabel(){ 
    if(!`objExists "delete_after_export"`) group -em -n "delete_after_export"; 
    if(!`objExists "Main1"`) {
        if(!`objExists "duplicate_Main"`) {
            group -em -n "duplicate_Main";   
            parent "duplicate_Main" "delete_after_export";  
            }
        }
    }
global proc crPerspAnchor(){
    $p=`xform -q -t "persp"`;
    $r=`xform -q -ro "persp"`;    
    if(`objExists "persp_anchor"`) delete "persp_anchor";
    spaceLocator -n "persp_anchor";
    if(!`objExists "delete_after_export"`) group -em -n "delete_after_export";
    parent "persp_anchor" "delete_after_export";
    xform -ws -t $p[0] $p[1] $p[2 ]"persp_anchor";
    xform -ws -ro $r[0] $r[1] $r[2 ]"persp_anchor";
    setAttr -lock true "persp_anchor.translate";  
    setAttr -lock true "persp_anchor.rotate";       
    }
	
global proc resetPerspCamera(){
    if(`objExists "persp_anchor"`){
        select -r  "persp" "persp_anchor";
        MatchTransform;
        }
    }


	
//exportRig();
global proc string exportRig(){
    int $expMB=`checkBox -q -v swMb`;
    int $expFBX=`checkBox -q -v swFbx`;
    int $reOpen=`checkBox -q -v swReOpen`;    
	string $sn = `file -q -sn`;
	string $dir = `match "^.*/" $sn`;
    string $fileN = `file -q -sn -shn`;  
    string $expN=`substitute ".mb" $fileN "_export.mb"`;    
     
	if(`objExists "export_sets"`){	
		$expSets=`sets -q "export_sets"`;
        refresh -suspend 1;
		if(`size($expSets)`){
			//resetPerspCamera
			resetPerspCamera();
			//import all reference and delete namespace
			ImportRefAndDeleteNameSpace();
			//clean file
            if(`objExists "duplicate_Main"`) crAdvMainSecCtrl();	            
            OrganizeForExportRig();
			advCleanUpForExportRig();

            sysFile -makeDir ($dir+"temp");
            $exportN=($dir+"temp/"+$expN);
            file -rename $exportN; 
            file -save -type "mayaBinary";
			
			//export maya
			exportRigMayaFBX($expMB,$expFBX,$expSets,$exportN,$dir);
            if($reOpen==1){
                file -f -new;
                file -open $sn;
                }
            refresh -suspend 0;    
			print "working successful!!";
		}else{		
			print "no export_set member\n";
			}
	}else{
		print "no export_set\n";
		}			
	return $sn;
    }
	
global proc exportRigMayaFBX(int $expMB,int $expFBX,string $expSets[],string $sn,string $dir){
    $dir3= `substitute "/MAYA/" $dir "/FBX/"`; 
    sysFile -makeDir $dir3;
    $work=`file -q -ex $dir3`;

    for($i=0;$i<`size($expSets)`; $i++) { 
        select -r "export_sets";
        $delMembers=`ls -sl`;
        $members=`sets -q $expSets[$i]`;
        $delMembers = stringArrayRemove($members,$delMembers); 
        if(`size $delMembers`) delete $delMembers;           
        $fileN=`substitute "_set" $expSets[$i] ""`; 
        $dir2=($dir+$fileN+"_rig"); 


        rename "Group" $fileN;
			
        if($expMB==1){            
            select -r -ne ("|"+$fileN);
            if(`objExists "Sets"`) select -add -ne "Sets";    
            file -force -options "v=0;" -type "mayaBinary" -pr -es ($dir2+".mb");
            //pb
            select -cl;
            playblast  -fr 1 -format image -cf ($dir2+".jpg") -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -percent 100 -compression "jpg" -quality 100 -widthHeight 960 540;
            }

        if ($expFBX==1){
            if(`objExists "SK_Player_Head_000"`) delete "SK_Player_Head_000";
            DeleteMotionSystembyLuke();
            select -r -ne "Geometry" "DeformationSystem";            
            file -force -options "v=0;" -typ "FBX export" -pr -es ($dir3+$fileN);     
            }


        file -f -new;    
        file -open $sn;
        }
    }


