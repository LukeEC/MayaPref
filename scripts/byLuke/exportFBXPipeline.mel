
global proc changeMAtoMB(){
    string $sn = `file -q -sn`;
    string $dir = `match "^.*/" $sn`;
    string $stuffInFolder[]= `getFileList -fld $dir`; 
    string $fileN; 
    string $ma="*.ma";       
    for($fileN in $stuffInFolder){
        if(`gmatch $fileN $ma`){    
            //print ($fileN+"\n");
            file -f -new; 
            file -open ($dir+$fileN);                             
            file -save -type "mayaBinary";               
            }
        }    
    }
/*
$sels=`ls -sl`;
$b=getChara($sels[0]);
print $b;
	*/
global proc string getChara(string $sel){
    string $charas[];
	
    if(`gmatch $sel "*:*"`){
        $temp=`tokenize $sel ":" $charas`;
        print($charas);
        return ($charas[0]+":");        
    }else{
        return "";
        }
    }
	
global proc string[] getNameSapceFromReferenceObject(){
    $refs=`file -q -r`;
    string $nSs[];
	string $ref;	
    for($ref in $refs){
        if(`gmatch $ref "*.mb"`||`gmatch $ref "*.ma"`){        
            $rfn=`file -q -rfn $ref`;
            $nns[0]=`referenceQuery -namespace $rfn`;
            $nSs=stringArrayCatenate($nSs,$nns);
            }
        }
    return $nSs;
    }
  
global proc ImportRefAndDeleteNameSpace(){ 
    $refs=`file -q -r`;
    $ns=getNameSapceFromReferenceObject();
          
    for($ref in $refs){
        file -importReference $ref;
        } 
        
    for($n in $ns){   
        if ($n!=":"){
            namespace -mergeNamespaceWithRoot -removeNamespace $n;        
            }
        }
    }

global proc advCleanComboForExportRig(){
    source "Advance/AdvancedSkeleton5.mel";
	if(`objExists "Root_M"`&&`objExists "Sets"`){
		//delete adv Key
		asMCLRemoveBody "";
		//hide adv jt
		asJointsVisibility 0;
		//go to adv bind pose
		asGoToBuildPose bodySetup;
		}
    //delete layer
    $displayLayers=`ls -type "displayLayer"`;
    $displayLayersRemoves={"defaultLayer"};
    $displayLayers= stringArrayRemove($displayLayersRemoves, $displayLayers);
    if (`size $displayLayers`) delete $displayLayers;
        
    //delete unused node
    hyperShadePanelMenuCommand("", "deleteUnusedNodes");
    //delete unused skin weight
    //asRemoveAllUnusedInfluences;
	
    if (`objExists FaceControlSet`) asGoToBuildPose faceSetup;
        
    }
	
global proc toZero(string $obj){     
    move -ws -a 0 0 0 $obj;
    rotate -ws -a 0 0 0 $obj;
    scale -ws -a 1 1 1 $obj;
    setAttr ($obj+".visibility") 1;	
    cutKey $obj;
    }  

global proc resetPerspCamera(){
    if(`objExists "persp_anchor"`){
        select -r  "persp" "persp_anchor";
        MatchTransform;
        }
    }
	
//exportRig();
global proc string exportRig(){
    $expSets=`sets -q "export_sets"`;
	string $sn = `file -q -sn`;
	string $dir = `match "^.*/" $sn`;
    if(`size($expSets)`){


		//resetPerspCamera
		resetPerspCamera();
		
        //import all reference and delete namespace
        ImportRefAndDeleteNameSpace();

        //delete temp object;    
        if(`objExists "delete_after_export"`) delete "delete_after_export";   
        if(`objExists "delete_set"`)  delete `sets -q "delete_set"`;     

        //clean file
        advCleanComboForExportRig();             
		
        $en=substring($sn, 0, size($sn) - 3);
        $exportN=($en+"_export.mb");    		
        file -rename $exportN; 
        file -save -type "mayaBinary";
        
        global string $fileN;
        //export maya
        for($i=0;$i<`size($expSets)`; $i++) { 

            $delMembers=`listRelatives -c "Geometry"`;
            $members=`sets -q $expSets[$i]`;
            $delMembers = stringArrayRemove($members,$delMembers); 
            if(`size $delMembers`) delete $delMembers;
            
            eval("$fileN=`substitute \"_set\" \""+$expSets[$i]+"\" \"\"`;");             
            //$fileN=`substitute "_set" $expSets[$i] ""`; 
                  
            $dir2=($dir+$fileN+"/"+$fileN+"_rig"); 
            $dir3=($dir+$fileN+"/FBX/"+$fileN);
            rename "Group" $fileN;
            select -r -ne ("|"+$fileN);      
            file -force -options "v=0;" -type "mayaBinary" -pr -es ($dir2+".mb");

            select -cl;
            playblast  -fr 1 -format image -cf ($dir2+".jpg") -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -percent 100 -compression "jpg" -quality 100 -widthHeight 960 540;

            select -r -ne "Geometry" "DeformationSystem";            
            file -force -options "v=0;" -typ "FBX export" -pr -es $dir3;            
                   
            //file -force -options "v=0;" -typ "FBX export" -pr -es ($cloud+"/FBX/"+$fNs[$i]);   
            file -f -new;    
            file -open $exportN;
            }
                    
        //file -f -new;    
        //file -open $sn;        
		return $sn;          
        print "working successful!!";
        }else{
		return $sn;  			
        print "select geo";
        }

    }
	
global proc exportRigCombo(string $dir,string $fN){
    file -force -options "v=0;" -type "mayaBinary" -pr -ea ($dir+$fN+"_rig.mb");
    select -r "DeformationSystem" "Geometry";
    file -force -options "v=0;" -typ "FBX export" -pr -es ($dir+"FBX/"+$fN); 
    playblast  -fr 1 -format image -cf ($dir+$fN+"_rig.jpg") -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -percent 100 -compression "jpg" -quality 100 -widthHeight 960 540;
    
    }
	
global proc exportRiggingFBX(){
    string $sn = `file -q -sn`;
    string $dir = `match "^.*/" $sn`;
    string $dirF=($dir+"FBX");
    
    string $fileN = `file -q -sn -shn`;
    $fileN=substring($fileN, 0, size($fileN) - 7);    
    
    $work=`file -q -ex $dirF`;
    if($work==1){
        select -r "DeformationSystem" "Geometry";
        file -force -options "v=0;" -typ "FBX export" -pr -es ($dirF+"/"+$fileN);
    }else{
        print ("找不到:"+$dirF);
    }
    }

//player是特規 因為紙娃娃系統    
//exportPlayerRig();
global proc exportPlayerRig(){
    $expSets=`sets -q "export_sets"`;
    if(`size($expSets)`){
        refresh -suspend 1;         
        string $sn = `file -q -sn`;
        string $dir = `match "^.*/" $sn`;

		//resetPerspCamera
		resetPerspCamera();
        
        //import all reference and delete namespace
        ImportRefAndDeleteNameSpace();
        
        //delete editing object
        if(`objExists "delete_after_export"`) delete "delete_after_export";   
        if(`objExists "delete_set"`) delete`select -r "delete_set"`; 
        
        //clean file
        advCleanComboForExportRig();
        
        $en=substring($sn, 0, size($sn) - 3);
        $exportN=($en+"_export.mb");  
        file -rename $exportN; 
        file -save -type "mayaBinary";  
        
        exportPlayerRigFBX($expSets,$exportN,$dir);  
        refresh -suspend 0;  
        exportPlayerRigMaya($expSets,$exportN,$dir);
        file -open $sn;                  
        print "working successful!!";        
    }else{
        print "select geo";
        }
    }
/*
global proc exportPlayerRigFBX(string $expSets[],string $sn,string $dir){
       
    select -r $expSets;
    $sels=`ls -sl`;
    string $fN;
    for($obj in $sels){
        $fN=("SK_Player_"+$obj);
        //rename "Group" $fN; 
        select -r $obj "DeformationSystem";
        file -force -options "v=0;" -typ "FBX export" -pr -es ($dir+"FBX/"+$fN);     
        file -f -new;    
        file -open $sn;        
        }
    }
*/
global proc exportPlayerRigFBX(string $expSets[],string $sn,string $dir){
    //$expSets=`sets -q "export_sets"`;       
    select -r $expSets;
    $sels=`ls -sl`;

    for($obj in $sels){
        rename "Group" $obj; 
        select -r ("Geometry|"+$obj) "DeformationSystem";
        file -force -options "v=0;" -typ "FBX export" -pr -es ($dir+"FBX/"+$obj);   
        rename ("|"+$obj) "Group";           
     
        }
    }	
 
global proc exportPlayerRigMaya(string $expSets[],string $sn,string $dir){
    for($i=0;$i<`size($expSets)`; $i++) {
        $fNset=$expSets[$i]; 
        //deleteUnusedPart 
        $delMembers=`listRelatives -c "Geometry"`;
        $members=`sets -q $fNset`;
        $delMembers = stringArrayRemove($members,$delMembers); 
         if(`size $delMembers`) delete $delMembers;
        
        //setPath
        $fileN=`substitute "_set" $fNset ""`;    
        $part=`substitute "SK_Player_" $fileN ""`;     
        $dir2=($dir+$part+"/"+$fileN+"_rig");  
        //export
        select -r -ne "Group" "Sets";      
        file -force -options "v=0;" -type "mayaBinary" -pr -es ($dir2+".mb");
    
        //pb
        select -cl;
        playblast  -fr 1 -format image -cf ($dir2+".jpg") -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -percent 100 -compression "jpg" -quality 100 -widthHeight 960 540;
            
        file -f -new;    
        file -open $sn;       
        }    
    }  

global proc updateModel(string $selsA[],string $selsB[]){
    select -r `skinCluster -q -inf $selsA`;
    select -add $selsB;
    SmoothBindSkin;
    
    for ($i=0; $i<`size($selsB)`;$i++){ 
    copySkinWeights  -noMirror -surfaceAssociation closestPoint -influenceAssociation closestJoint -influenceAssociation closestJoint -influenceAssociation closestJoint $selsA[0] $selsB[$i];
    };
    }

//輸出動做FBX
//batchExportAniFBXHub();
global proc batchExportAniFBXHub(){
    string $sn = `file -q -sn`;
    string $dir = `match "^.*/" $sn`;
    batchExportAniFBX($dir);
	print "It's feeling good~ Right?";
    }
	
global proc batchExportAniFBX(string $dir){
    string $stuffInFolder[]= `getFileList -fld $dir`;
    string $fileN; 
    string $mb="*.mb";
    string $exp="*_export*";    
    for($fileN in $stuffInFolder){
        if(`gmatch $fileN $mb`&&!`gmatch $fileN $exp`){    
            //print ($fileN+"\n");
            file -f -new;          
            file -open ($dir+$fileN);        
            exportAniFBXTest(); 
            }
        }
    }


global proc exportAniFBXTest(){
    string $sn = `file -q -sn`;
    string $dir = `match "^.*/" $sn`;
    string $fileN = `file -q -sn -shn`;
    $fileN=substring($fileN, 0, size($fileN) - 7);

    string $buffer[];
    $numTokens = `tokenize $fileN "_" $buffer`;
    //print $buffer;
    if(`size $buffer[4]`) $buffer[3]=$buffer[3]+"_"+$buffer[4];
    $fbxChara=($buffer[0]+"_"+$buffer[1]+"_"+$buffer[2]+"_"+$buffer[3]+".fbx");
    
    refresh -suspend 1;      
    ImportRefAndDeleteNameSpace();
    
    $en=substring($sn, 0, size($sn) - 3);
    $exportN=($en+"_export.mb");    
    file -rename $exportN; 
    file -save -type "mayaBinary";
    
        
    //需要sets 要輸出的骨架
    select -r "*DeformationSystem" ;
    $bakeSets=`ls -sl`;
    float $minTime = `playbackOptions -q -minTime`;
    float $maxTime = `playbackOptions -q -maxTime`;
    bakeResults -simulation true -t ($minTime+":"+$maxTime) -hierarchy below -sampleBy 1 -oversamplingRate 1 -disableImplicitControl true -preserveOutsideKeys true -sparseAnimCurveBake false -removeBakedAttributeFromLayer false -removeBakedAnimFromLayer false -bakeOnOverrideLayer false -minimizeRotation true -controlPoints false -shape true $bakeSets;
    cutKey -t ":" -f ":" -at "tx" -at "tz" "Root_M";    
    setAttr "Root_M.translateX" 0;
    setAttr "Root_M.translateZ" 0;
    
    string $fbxdir = `substitute "/MAYA/" $dir "/FBX/"`;     
    select -r "Root_M";	
	
    file -force -options "v=0;" -typ "FBX export" -pr -es ($fbxdir+$fbxChara);

    
    //抽象化語法
    //setAttr "WeaponR.blendParent1" 0;
    if (`objExists "CloakRoot"`){
        toZero("CloakRoot");
        $fbxCloak=($buffer[0]+"_"+$buffer[1]+"_"+$buffer[2]+"_Cloak_"+$buffer[3]+".fbx");
        select -r "CloakRoot";
        file -force -options "v=0;" -typ "FBX export" -pr -es ($fbxdir+$fbxCloak);
        } 
               
    if (`objExists "WeaponRoot"`){        
        toZero("WeaponRoot");
        $fbxWeapon=($buffer[0]+"_"+$buffer[1]+"_"+$buffer[2]+"_Weapon_"+$buffer[3]+".fbx");
        select -r "WeaponRoot";
        file -force -options "v=0;" -typ "FBX export" -pr -es ($fbxdir+$fbxWeapon);
        }
 
    if (`objExists "WeaponBRoot"`){        
        toZero("WeaponBRoot");
        $fbxWeapon=($buffer[0]+"_"+$buffer[1]+"_"+$buffer[2]+"_WeaponB_"+$buffer[3]+".fbx");
        select -r "WeaponBRoot";
        file -force -options "v=0;" -typ "FBX export" -pr -es ($fbxdir+$fbxWeapon);
        } 
      
    refresh -suspend 0; 
    print "working successful!!";
    }
    
 
global proc exportOnlyPlayerAniFBXTest(){
    string $sn = `file -q -sn`;
    string $dir = `match "^.*/" $sn`;
    
    string $fileN = `file -q -sn -shn`;
    $fileN=substring($fileN, 0, size($fileN) - 3);

    
    //refresh -suspend 1;      
    ImportRefAndDeleteNameSpace();
    
    $en=substring($sn, 0, size($sn) - 3);
    $exportN=($en+"_export.mb");    
    file -rename $exportN; 
    file -save -type "mayaBinary";
    
        
    //需要sets 要輸出的骨架
    select -r "*DeformationSystem" ;
    $bakeSets=`ls -sl`;
    float $minTime = `playbackOptions -q -minTime`;
    float $maxTime = `playbackOptions -q -maxTime`;
    bakeResults -simulation true -t ($minTime+":"+$maxTime) -hierarchy below -sampleBy 1 -oversamplingRate 1 -disableImplicitControl true -preserveOutsideKeys true -sparseAnimCurveBake false -removeBakedAttributeFromLayer false -removeBakedAnimFromLayer false -bakeOnOverrideLayer false -minimizeRotation true -controlPoints false -shape true $bakeSets;
    
    
    //抽象化語法

    
    //$fileN="ANI_Player_Bow_Skill02_anim_v01";
    string $buffer[];
    $numTokens = `tokenize $fileN "_" $buffer`;
    //print $buffer
    $fbxChara=($buffer[0]+"_"+$buffer[1]+"_"+$buffer[2]+"_"+$buffer[3]+"_"+$buffer[4]+".fbx");

    select -r "Root_M";
    file -force -options "v=0;" -typ "FBX export" -pr -es ($dir+"FBX/"+$fbxChara);

    
    //refresh -suspend 0; 
    print "working successful!!";
    }


//exportEnemyAniFBX();
global proc exportEnemyAniFBX(){
    string $sn = `file -q -sn`;
    string $dir = `match "^.*/" $sn`;    
    string $fileN = `file -q -sn -shn`;
    $fileN=substring($fileN, 0, size($fileN) - 3);
    
    $en=substring($sn, 0, size($sn) - 3);
    $exportN=($en+"_export.mb");
    
    //refresh -suspend 1; 
                 
    ImportRefAndDeleteNameSpace();    

    select -r "DeformationSystem" ;
    $bakeSets=`ls -sl`;
    float $minTime = `playbackOptions -q -minTime`;
    float $maxTime = `playbackOptions -q -maxTime`;
    bakeResults -simulation true -t ($minTime+":"+$maxTime) -hierarchy below -sampleBy 1 -oversamplingRate 1 -disableImplicitControl true -preserveOutsideKeys true -sparseAnimCurveBake false -removeBakedAttributeFromLayer false -removeBakedAnimFromLayer false -bakeOnOverrideLayer false -minimizeRotation true -controlPoints false -shape true $bakeSets;

    file -rename $exportN; 
    file -save -type "mayaBinary";

    $fbx=($dir+"FBX/"+$fileN+".fbx");
 
    select -r "DeformationSystem" ;
    file -force -options "v=0;" -typ "FBX export" -pr -es $fbx;

    file -force -save -options "v=0";

    refresh -suspend 0; 
    print "working successful!!";
    }