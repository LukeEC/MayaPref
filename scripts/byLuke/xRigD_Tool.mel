source "byLuke/xRigD";
xRigDTool();

global proc xRigDTool(){
    if (`window -q -exists testWin`) 
          deleteUI testWin;
    window -s 0 -title "xRigD" -maximizeButton 0 -minimizeButton 1 testWin;
	frameLayout -bgc 0.1 0.1 0.2 -label "groupArray";
    columnLayout;  
    rowColumnLayout -numberOfColumns 3 -columnWidth 1 50 -columnWidth 2 50 -columnWidth 3 200;                                                
            button -l "A group" -bgc 50 50 0 -c "$selsA=grpArray($selsA);print $selsA;";
            button -l "B group" -bgc 50 0 50 -c "$selsB=grpArray($selsB);print $selsB;"; 
            text -label "" -align "center";
    setParent..;                          
    
    rowColumnLayout -numberOfColumns 1 -columnWidth 1 300 ;         
              radioButtonGrp -bgc 0.25 0.25 0.25 -numberOfRadioButtons 3 -label "" -sl 2 -labelArray3 "2-2" "1-2" "2-1" -columnWidth 1 30 constrainMode;
                    
    setParent..;
    
    frameLayout -bgc 0.2 0.1 0.1 -label "Constrains";
    rowColumnLayout -numberOfColumns 3 -columnWidth 1 100 -columnWidth 2 100 -columnWidth 3 100 ;                                               
            separator -st "none";
            separator -st "none";              
            button -l "deleteAllConstrain" -c "advSetsConstrain($constrains,1)";  
            checkBox -l "maintain_offset" -v 0 mt;   
            separator -st "none";  
            button -l "setAllConstrain"-c "advSetsConstrain($constrains,0)"; 
    setParent..;                
                                    
    rowColumnLayout -numberOfColumns 3 -columnWidth 1 100 -columnWidth 2 100 -columnWidth 3 100 ;        
            button -l "Parent" -c "advMixJobCtx(0,0,$selsA,$selsB,$constrains)";        
            button -l "Point" -c "advMixJobCtx(1,0,$selsA,$selsB,$constrains)";
            button -l "Orient" -c "advMixJobCtx(2,0,$selsA,$selsB,$constrains)";
            button -l "Scale" -c "advMixJobCtx(3,0,$selsA,$selsB,$constrains)";        
            button -l "Geometry" -c "advMixJobCtx(4,0,$selsA,$selsB,$constrains)";        
            button -l "Normal" -c "advMixJobCtx(5,0,$selsA,$selsB,$constrains)";

    setParent..;
    
    frameLayout -bgc 0.1 0.2 0.1 -label "Align" ;
    rowColumnLayout -nc 4 -cw 1 100 -cw 2 60 -cw 3 60 -cw 4 60;
        checkBox -l "Translate" -cc "checkAll(0)" allTrans;
        
        checkBox -l "X" -cc "unCheck(\"trans\")" transX;
        checkBox -l "Y" -cc "unCheck(\"trans\")" transY;
        checkBox -l "Z" -v 1 -cc "unCheck(\"trans\")" transZ;
        
        checkBox -l "Rotate" -cc "checkAll(1)" allRots;
        
        checkBox -l "X" -cc "unCheck(\"rot\")" rotX;
        checkBox -l "Y" -cc "unCheck(\"rot\")" rotY;
        checkBox -l "Z" -cc "unCheck(\"rot\")" rotZ;
        
        checkBox -l "Scale" -cc "checkAll(2)" allScs;
        
        checkBox -l "X" -cc "unCheck(\"sc\")" scX;
        checkBox -l "Y" -cc "unCheck(\"sc\")" scY;
        checkBox -l "Z" -cc "unCheck(\"sc\")" scZ;
    
    setParent..;
    button -l "Snap it" -c"advMixJobCtx(0,1,$selsA,$selsB,$constrains)";

    setParent..;    
        
    separator -style "in" -w 315 ;  
    window -e -wh 300 340 testWin;
    showWindow testWin;
    }

global proc unCheck(string $checkBoxes){
    string $transX = `checkBox -q -value transX`;
    string $transY = `checkBox -q -value transY`;
    string $transZ = `checkBox -q -value transZ`;
    string $rotX = `checkBox -q -value rotX`;
    string $rotY = `checkBox -q -value rotY`;
    string $rotZ = `checkBox -q -value rotZ`;
    string $scX = `checkBox -q -value scX`;
    string $scY = `checkBox -q -value scY`;
    string $scZ = `checkBox -q -value scZ`;
    
    switch ($checkBoxes){
    	
    	case "trans":
    		if (($transX == 0) || ($transY == 0) || ($transZ == 0))		
    			checkBox -e -v false allTrans;
    
    		
    		if ($transX && $transY && $transZ)
    			checkBox -e -v true allTrans;
    	break;
    
    	case "rot":
    		if (($rotX == 0) || ($rotY == 0) || ($rotZ == 0))		
    			checkBox -e -v false allRots;		
    		if ($rotX && $rotY && $rotZ)
    			checkBox -e -v true allRots;
    	break;
    
    	case "sc":
    		if (($scX == 0) || ($scY == 0) || ($scZ == 0))		
    			checkBox -e -v false allScs;		
    		if ($scX && $scY && $scZ)
    			checkBox -e -v true allScs;
        break;
        }
    }

/*��������
$t:0(translation);1(rotate);2(scale);
*/
global proc checkAll(int $t){
	if ($t==0){
		int $t = `checkBox -q -value allTrans`;
		checkBox -e -v $t transX;
		checkBox -e -v $t transY;
		checkBox -e -v $t transZ;		
	}else if($t==1){
		int $t = `checkBox -q -value allRots`;
		checkBox -e -v $t rotX;
		checkBox -e -v $t rotY;
		checkBox -e -v $t rotZ;		
	}else if($t=2){
		int $t = `checkBox -q -value allScs`;
		checkBox -e -v $t scX;
		checkBox -e -v $t scY;
		checkBox -e -v $t scZ;		
		}
	}

/*��tranzCB --lv1--lp0--rc0
	return:$tranzCB
	*/
global proc int[] getSnapCB(){
	int $tranzCB[];//translation checkBox
	
	$tranzCB[0]=`checkBox -q -v transX`;
	$tranzCB[1]=`checkBox -q -v transY`;
	$tranzCB[2]=`checkBox -q -v transZ`;
	
	$tranzCB[3]=`checkBox -q -v rotX`;
	$tranzCB[4]=`checkBox -q -v rotY`;
	$tranzCB[5]=`checkBox -q -v rotZ`;
	
	$tranzCB[6]=`checkBox -q -v scX`;
	$tranzCB[7]=`checkBox -q -v scY`;
	$tranzCB[8]=`checkBox -q -v scZ`;
	   
	return $tranzCB;     
    }
 

/*���� --lv3--lp1--rc0
$c:�M�w�έ��@�ج���(0=parent/1=point/2=orient/3=scale/4=geometry/5=normal)
$j: job 0(constrain);1(snap);
$constrains:�����R�O�C(�۩w�q����Ѽ�)
*/
global proc advMixJobCtx(int $c,int $j,string $selsA[],string $selsB[],string $constrains[]){
	int $tranzCB[]=getSnapCB();	//--lv1--lp0--rc0
	string $one[];
	string $multi[];
    string $sels[]=`ls -sl`;//2-1��1-2�ɥ�
    int $n=`size($sels)`; //$sels���ƶq
    $mode=`radioButtonGrp -q -sl constrainMode`; 
    $m=`checkBox -q  -v mt`; //	$m : maintinOffset(on/off)
	
	//�@2-2	
    if ($mode==1){
        if (`size($selsA)`!=`size($selsB)`){ 
			print "A��B�ռƶq���۵�";
        }else {
			if($j==0){
				advMixConstrain($c,$m,$mode,$selsA,$selsB,$constrains);//--lv2--lp1--rc0				
			}else if ($j==1){	
				mutiSnap($mode,$tranzCB,$selsA,$selsB); //--lv2--lp1--rc0	
				}				
			}
			
	 //�@1-2     
    }else if($mode==2){
        if ($n<=1){
			print "�ܤֿ���ӪF��";
        }else{		
			$one[0]=$sels[0];
			$multi=$sels;
			stringArrayRemoveAtIndex(0,$multi);
			if($j==0){
				advMixConstrain($c,$m,$mode,$one,$multi,$constrains);//--lv2--lp1--rc0				
			}else if ($j==1){
				print "snap����1-2";  
				}	
			}     
	 
	 //�@2-1  
    }else if($mode==3){
        if ($n<=1){
			print "�ܤֿ���ӪF��";
        }else{
			$one[0]=$sels[($n-1)];
			$multi=$sels;
			stringArrayRemoveAtIndex(($n-1),$multi);
			if($j==0){
				advMixConstrain($c,$m,$mode,$multi,$one,$constrains);//--lv2--lp1--rc0				
			}else if ($j==1){
				mutiSnap($mode,$tranzCB,$multi,$one);//--lv2--lp1--rc0		
				}		
			} 
        }   
    }

/* �ª���
global proc advMixConstrainCtx(int $c,string $selsA[],string $selsB[],string $constrains[]){
	string $one[];
	string $multi[];
    string $sels[]=`ls -sl`;//2-1��1-2�ɥ�
    int $n=`size($sels)`; //$sels���ƶq
    $mode=`radioButtonGrp -q -sl constrainMode`; 
    $m=`checkBox -q  -v mt`; //	$m : maintinOffset(on/off)
	
	//�@2-2	
    if ($mode==1){
        if (`size($selsA)`==`size($selsB)`){ 
			advMixConstrain($c,$m,$mode,$selsA,$selsB,$constrains);//--lv2--lp1--rc0		
        }else {
			print "A��B�ռƶq���۵�";
			}
			
	 //�@1-2     
    }else if($mode==2){
        if ($n<=1){
			print "�ܤֿ���ӪF��";
        }else{		
			$one[0]=$sels[0];
			$multi=$sels;
			stringArrayRemoveAtIndex(0,$multi);
			advMixConstrain($c,$m,$mode,$one,$multi,$constrains);//--lv2--lp1--rc0	
			}     
	 
	 //�@2-1  
    }else if($mode==3){
        if ($n<=1){
			print "�ܤֿ���ӪF��";
        }else{
			$one[0]=$sels[($n-1)];
			$multi=$sels;
			stringArrayRemoveAtIndex(($n-1),$multi);
			advMixConstrain($c,$m,$mode,$multi,$one,$constrains);//--lv2--lp1--rc0		
			} 
        }   
    }
*/