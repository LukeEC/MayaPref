uiReOrientCtrlTool();
global proc uiReOrientCtrlTool(){
        if (`window -exists uiReOrientCtrlTool`)
                deleteUI -window uiReOrientCtrlTool;
                        
        $window = `window -title "uiReOrientCtrl" -h 80 -w 100 -rtf 1  -s 1  uiReOrientCtrlTool`;
        frameLayout -bgc 0.2 0.2 0.2 -label "Only for AdvanceSkeleton now";        
            button -h 23 -w 100 -l "reverseIK" -bgc 0.1 0.2 0.2 -c "reOrientHub 0";
            button -h 23 -w 100 -l "recoverIK" -bgc 0.1 0.2 0.2 -c "reOrientHub 1";   
                           
        showWindow uiReOrientCtrlTool;
        }


proc reOrientHub(int $mode){
    $sels=`ls -sl`;
    string $obj=$sels[0];
    if(`size($sels)`!=1) {
        print "do this job with one selected\n" ;  
    }else{  
        if($mode==0){  
            if(!`gmatch $obj "IK*"`){
                print "please select a IK ctrl\n" ; 
            }else if(`gmatch $obj "*_reOrient"`){
                print "u cant do this when selceted a reOrient helper\n" ;                                 
            }else{

                reverseIKOrient();
                } 
        }else if($mode==1){ 
            if(!`gmatch $obj "*_reOrient"`){
                print "please select a reOrient helper\n" ; 
            }else{

                recoverIKOrient(); 
                }     
            }
        } 
    }   
        
proc reverseIKOrient(){
    $sels=`ls -sl`; 
    refresh -suspend 1; 
       
    if(!`objExists "dont_delete_grp"`)
        group -em -n "dont_delete_grp";     
    string $pa[]=`listRelatives -p $sels`;
    string $sh[]=`listRelatives -s $sels`;
    $offset=($pa[0]+"_reOrient");
    $reOrient=($sels[0]+"_reOrient");
    duplicate -po -n $offset $pa;
    parent -w $offset;
    parent $offset "dont_delete_grp";
    $dup =`duplicateCurve $sh`;
    rename $dup[0] $reOrient;
    parent $reOrient $offset;
    move -os -a 0 0 0 $reOrient;
    rotate -a -os -fo 0 0 0 $reOrient;
    
    setAttr ($reOrient+".overrideEnabled") 1;
    setAttr  ($reOrient+".overrideColor") 20;
    
    setAttr -k on -l off ($offset+".scaleX");
    setAttr -k on -l off ($offset+".scaleY");
    setAttr -k on -l off ($offset+".scaleZ");
    setAttr ($offset+".scaleX") -1;

    $acT=`listConnections  -t "animCurveTL" $sels`;
    $acR=`listConnections -t "animCurveTA" $sels`;
    float $keyTimes[]=`keyframe -q $acT $acR`;
    if(`size($keyTimes)`){        
        floatArrayRemoveDuplicates($keyTimes,0);
        $keyTimes = `sort $keyTimes`;
        }
    parentConstraint -mo $pa $offset;
    $p=`xform -q -ws -t $sels[0]`;
    $r=`xform -q -ws -ro $sels[0]`;
    move -os -a 0 0 0 $sels[0];
    rotate -a -os -fo 0 0 0 $sels[0];
    $cons=`parentConstraint -mo $sels[0] $reOrient`; 
    xform -ws -t $p[0] $p[1] $p[2] $sels[0]; 
    xform -ws -ro $r[0] $r[1] $r[2] $sels[0];
    if(`size($keyTimes)`){
        setKeyframe -t $keyTimes[0] -at "translate"  $reOrient; 
        setKeyframe -t $keyTimes[0] -at "rotate"  $reOrient;               
        setAttr ($reOrient+".blendParent1") 1;        
        //fastbakeKey({$reOrient});
        for($t in $keyTimes){
            currentTime $t;    
            setKeyframe -t $t -at "translate"  $reOrient; 
            setKeyframe -t $t -at "rotate"  $reOrient;              
            }
        }
    delete $cons;
    
    
    parentConstraint -mo $reOrient $sels;
    setAttr ($sels[0]+".visibility") 0;
    cutKey -cl -t ":" -f ":" -at "v" $sels[0];  
    
    refresh -suspend 0; 

    }

proc recoverIKOrient() {
    $sels=`ls -sl`;
         
    refresh -suspend 1;  
       

    $del=`listRelatives -p $sels`;
    $cons=`listConnections -s off -t "constraint" $sels`; 
    $cons = stringArrayRemoveDuplicates ($cons); 
    $dvn=selectConDvn(); 
    /*
    $trg=getTimeRange();
    cutKey -t $trg -at "translate" $dvn;  
    cutKey -t $trg -at "rotate" $dvn;        
    */        
    cutKey -at "translate" $dvn;  
    cutKey -at "rotate" $dvn; 

    $acT=`listConnections  -t "animCurveTL" $sels`;
    $acR=`listConnections -t "animCurveTA" $sels`;
    float $keyTimes[]=`keyframe -q $acT $acR`;
    if(`size($keyTimes)`){          
        floatArrayRemoveDuplicates($keyTimes,0);
        $keyTimes = `sort $keyTimes`;  
        setKeyframe -t $keyTimes[0] -at "translate"  $dvn; 
        setKeyframe -t $keyTimes[0] -at "rotate"  $dvn;               
        setAttr ($dvn[0]+".blendParent1") 1;        
        //fastbakeKey({$reOrient});
        for($t in $keyTimes){
            currentTime $t;    
            setKeyframe -t $t -at "translate"  $dvn; 
            setKeyframe -t $t -at "rotate"  $dvn;              
            }
        }
    //fastbakeKey($dvn);
    delete $cons;
    setAttr ($dvn[0]+".visibility") 1;
    cutKey -cl -t ":" -f ":" -at "v" $dvn[0];
    delete $del;
    
    refresh -suspend 0;   
       
    }
    
proc string getTimeRange() {
    $minTime = `playbackOptions -q -minTime`; 
    $maxTime = `playbackOptions -q -maxTime`; 
    string $tg=($minTime+":"+$maxTime); 
    return $tg;
    }        
    
proc fastbakeKey(string $objs[]){
    $tg=getTimeRange(); 
    //refresh -suspend 1; 
    bakeResults 
    -t $tg 
    -simulation 1 
    -sampleBy 1 
    -disableImplicitControl 1 
    -preserveOutsideKeys 1 
    -sparseAnimCurveBake 0 
    -removeBakedAttributeFromLayer 0 
    -removeBakedAnimFromLayer 0 
    -bakeOnOverrideLayer 0   
    -minimizeRotation 1 
    -controlPoints 0
    -shape 0
    -at "tx" 
    -at "ty" 
    -at "tz" 
    -at "rx" 
    -at "ry" 
    -at "rz" 
    $objs;
    filterCurve;    
    //refresh -suspend 0;     
    }    

proc string[] selectConDvn() {
    string $follows[]; 
    $sels=`ls -sl`;
    
    $tempsA=`listConnections -s off -t "constraint" $sels`; 
    $tempsA = stringArrayRemoveDuplicates ($tempsA); 
    $tempsB=`listConnections -d off -t "constraint" $sels`; 
    $tempsB = stringArrayRemoveDuplicates ($tempsB); 
    $con = stringArrayRemoveExact ($tempsB, $tempsA);
    
    for ($x in $con) {
    $tempsC=`listConnections -type "transform" ($x+".constraintParentInverseMatrix")`; 
        $tempsD = stringArrayRemoveExact ({$x}, $tempsC); 
        $tempsE = stringArrayRemoveDuplicates ($tempsD);
        $follows=stringArrayCatenate ($follows, $tempsE);
        }
    if (`size $follows`) select -r $follows; 
    return $follows;
    }    
    
