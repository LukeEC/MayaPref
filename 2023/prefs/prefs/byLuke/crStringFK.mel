

    
/*創建單組FK控制器*/
proc string creFKctrl(string $jt,string $secJt){
    string $nm;
    string $ctrl;
    string $ls;
    string $ws; 
    string $sub;
    
    string $nms[];
    $no = `tokenize $jt "_" $nms`;
    $nm = $nms[0];
    string $ctrls[] ={"joint","ctrl","ctrl_ws","ctrl_ls","ctrl_sub"};
    stringArrayAddPrefix($ctrls, $nm+"_" );
    print $ctrls;    
    $ctrl = $ctrls[1];
    $ws = $ctrls[2];
    $ls = $ctrls[3];
    $sub = $ctrls[4];
    
    float $high = `getAttr($secJt+".translateY")`;
    print($high);
    file -import -rdn "Z:/principle/Setup/ctrl/jointCtrl.ma";
    select -r beNamed_ctrl.cv[0:1] beNamed_ctrl.cv[4:5] beNamed_ctrl.cv[8:9] beNamed_ctrl.cv[14:18] ;
    move -a -y ($high*0.8);
    select -r "beNamed_ctrl";
    group -a -name "beNamed_ctrl_ls";
    xform -os -piv 0 0 0;
    group -a -name "beNamed_ctrl_ws";
    xform -os -piv 0 0 0;
    searchReplaceNames "beNamed" $nm "all";
    alignA ($jt , $ws); //對齊位移*/
    alignC ($jt , $ws); //對齊旋轉*/
    alignB ($jt , $ls); //對齊縮放*/
    parentConstraint -weight 1 $sub $jt ;
    scaleConstraint -weight 1 $sub $jt ;
    return $nm;
    }

/*建立FK控制器set*/
proc string[] creCtrlSets(string $ctrls[]){
    string $ctrlSets[];
    string $ctrlSet;
    for ($i=0; $i<`size($ctrls)`;$i++){ 
        $ctrlSet = ("FK_"+$ctrls[$i]+"_set");
        if (!`objExists $ctrlSet` )
            sets -em -n $ctrlSet;
            
        $ctrlSets[$i]=$ctrlSet;
        };

    return $ctrlSets;
    clear $ctrls; 
    }

/*建立一串控制器set*/
proc string[] creSubStringFKctrlSets(string $nm,string $ctrls[],string $ctrlSets[]){
    string $subCtrlSet[];
    string $subCtrls[];
    clear $subCtrls;
    string $nn;
    string $nms[];
    string $subctrls[];
    $no = `tokenize $nm "0123456789" $nms`;
    $nn =$nms[0];

    $subCtrls=$ctrls; 
    stringArrayAddPrefix($subCtrls, $nn+"_" );
    
    for ($i=0; $i<`size($subCtrls)`;$i++){ 
        string $ctrl =$subCtrls[$i]+"_set";
        $subCtrlSet[$i]=$ctrl;
        if (!`objExists $ctrl` )   
            $jtSet =`sets  -em -n $ctrl`;
            sets -include $ctrlSets[$i] $ctrl;    
        }    
    return $subCtrlSet;
    }


/*stringRename一條改名(欠改良)
  $nm:name名稱(ex:hair/finger)
  $typ:type類型(ex:joint/ctrl/loc)
  */
proc string[] stringRename(string $nm,string $typ){
    
    select -hi;
    string $jts[] = `ls -sl -typ joint`;
    string $newnames[];
    for ($i=(`size($jts)`-1); $i>=0;$i--){
        $newnames[$i]=($nm+($i+1)+"_"+$typ);
        rename $jts[($i)] $newnames[$i];        
        }
    return $newnames;
    }
/*batch tokenize 對一列目標做tokenize 返回一串toke過的string*/
proc string[] batchTokes(string $sels[],string $split){
    string $nms[];
    string $objs[];
    for ($i=0; $i<`size($sels)`;$i++){ 
        $n =`tokenize $sels[$i] $split $nms `;
        $objs[$i]=$nms[0];
        }
    return $objs;
    }



proc builtTubeJointA(string $selsA[]){
    source "xRig_procedure";
    string $objs[];
    string $desels[]; 
    $numTokens = `tokenize $selsA[0] ".[:]" $objs`;
    string $vtxs[]= `polyListComponentConversion -fv -tv $objs[0]`;
    polySelectConstraint -m 3 -t 0x8000 -w 1; 
    polySelectConstraint -dis ;
    string $border[] =`ls -sl`;
    string $vtx[] = `polyListComponentConversion -tv $border`;
    select -r $vtx;
    toOne;
    
    for ($i=0; $i<`size($selsA)`;$i++){ 
        string $desels[]=nextRings($vtx,$desels);
        toOne;
        };
    clear $desels; 
    

    select -r $selsA;
    locatorsOnEdge(7);
    string $locs[]=`ls -sl`;
    
    gTransObjs("joint" , .25 );
    string $jts[]=`ls -sl`;
    parentStringJoint($jts);
    delete $locs;
    }
    
/*歸一 把所選的的元素都位移到平均中心*/
proc toOne(){
setToolTo moveSuperContext;
vector $v = `manipMoveContext -q -p Move`;
move -a  ($v.x) ($v.y) ($v.z) ;
}

/*逐層選模型元組loop
  搭配loop使用
  迴圈做完記得clear
*/
proc string[] nextRings(string $vtx[],string $dones[]){
    string $desels[] =stringArrayCatenate($dones, $vtx);
    $desels =stringArrayRemoveDuplicates($desels);
    GrowPolygonSelectionRegion;
    select -d $desels;
    clear $vtx;
    string $vtx[]=`ls -sl`;
    return $desels;
    }

/*creStringCtrl 
string $sel:選骨架第一節
$ctrlSets[] :sets組 搭配creCtrlSets使用
*/
proc creStringCtrl(string $sel,string $ctrlSets[]){
    select -r $sel;
    select -hi;
    string $jts[] = `ls -sl -typ joint`;
    //batch tokenize
    string $nms[] =batchTokes($jts,"_");
    int $n =`size($nms)`;
    string $ctrls[] ={"joint","ctrl","ctrl_ws","ctrl_ls","ctrl_sub"};   
    string $obj;        
    //建立一串控制器set 
    string $subCtrlSet[]=creSubStringFKctrlSets($nms[0],$ctrls,$ctrlSets);   
    
    for ($i=0; $i<($n-1);$i++){ 
        $j=$i+1;    $h=$i-1;
        string $nm =creFKctrl($jts[$i],$jts[$j]);   
        for ($k=0; $k<`size($ctrls)`;$k++){ 
            $obj=($nm+"_"+$ctrls[$k]);
            sets -include $subCtrlSet[$k] $obj;
            }
        $h =$i-1;
        if ($i>0){ 
            select -r ( $nms[$i]+"_"+$ctrls[2]+"\n");
            select -add ($nms[($h)]+"_"+$ctrls[1]);
            parent;
            }
        }
    }



      



    

    


/*creStringCtrl 
string $sel:選骨架第一節
$ctrlSets[] :sets組 搭配creCtrlSets使用
*/
proc creStringCtrl(string $sel,string $ctrlSets[]){
    select -r $sel;
    select -hi;
    string $jts[] = `ls -sl -typ joint`;
    //batch tokenize
    string $nms[] =batchTokes($jts,"_");
    int $n =`size($nms)`;
    string $ctrls[] ={"joint","ctrl","ctrl_ws","ctrl_ls","ctrl_sub"};   
    string $obj;        
    //建立一串控制器set 
    string $subCtrlSet[]=creSubStringFKctrlSets($nms[0],$ctrls,$ctrlSets);   
    
    for ($i=0; $i<($n-1);$i++){ 
        $j=$i+1;    $h=$i-1;
        string $nm =creFKctrl($jts[$i],$jts[$j]);   
        for ($k=0; $k<`size($ctrls)`;$k++){ 
            $obj=($nm+"_"+$ctrls[$k]);
            sets -include $subCtrlSet[$k] $obj;
            }
        $h =$i-1;
        if ($i>0){ 
            select -r ( $nms[$i]+"_"+$ctrls[2]+"\n");
            select -add ($nms[($h)]+"_"+$ctrls[1]);
            parent;
            }
        }
    }


/*
//頭髮骨架快速產生工具*/   
source "xRig_procedure";
string $sels[]=`ls -sl`;
builtTubeJointA($sels);


//斗式頭髮骨架快速產生工具*/   
//此工具生成後為不可逆
string $sels[]=`ls -fl -os`;
builtTubeJointB($sels,9); //lv3

//歸一 把所選的的元素都位移到平均中心 
toOne(); //lv1

//斗式歸一
string $sels[]=`ls -fl -os`;
funnelTubeToOne($sels); //lv2
select -r $sels;
//一條骨架
locatorsOnEdge(12); //lv1

//一串父子
string $selsP[] = `ls -sl`;
parentStringJoint($selsP); //lv1

//一條改名 (選第一節)
string $newnames[]= stringRename("hairEf","joint"); //lv1

//建立FK控制器set
string $ctrls[] ={"joint","ctrl","ctrl_ws","ctrl_ls","ctrl_sub"};  
string $sels[]=`ls -sl`;
string $ctrlSets[] = creCtrlSets($ctrls);
for ($sel in $sels){ 
    creStringCtrl($sel,$ctrlSets);
    }

*/
    