$min = `playbackOptions -q -minTime`; 
$min = `playbackOptions -q -minTime`; 
$max = `playbackOptions -q -maxTime`;
select -r "model:Body_Ctrl";
selectKey "Body_Ctrl_translateY_Merged_Layer_inputB";	
$aniC=`keyframe -q -n -sl`;

//CycleFrequencyMatchRange($aniC,$min,$max);
proc setCycleRegion(string $aniC[],float $min,float $max){
}
proc CycleFrequencyMatchRange(string $aniC[],float $min,float $max){
	int $x;
	float $s;
	$tc=getKeyPoseTime();
	$n=(`size($tc)`-1);
	$r=$tc[$n]-$tc[0];
	copyKey -t ($tc[0]+":"+$tc[$n]) $aniC;	
	if ($max>$tc[$n]){
	
		$x=($max-$tc[$n])/$r;

		for($i=1;$i<=$x;$i++){
			pasteKey -o "merge" -t ($tc[0]+($r*$i)) $aniC;		
		}
	}
	if ($min<$tc[0]){
	
		$x=($tc[0]-$min)/$r;

		for($i=1;$i<=$x;$i++){
			pasteKey -o "merge" -t ($tc[0]+($r*$i*-1)) $aniC;		
		}
	}	

	$tc2=`keyframe -q -tc $aniC`;
	$n2=(`size($tc2)`-1);
	if ($max>$tc2[$n2]){
		$tc2=`keyframe -q -tc $aniC`;		
		$s=($max-$tc2[0])/($tc2[$n2]-$tc2[0]);
		scaleKey  -tp $tc2[0] -ts $s $aniC;
		}	
	if ($min<$tc2[0]){
		$tc2=`keyframe -q -tc $aniC`;		
		$s=($min-$tc2[$n2])/($tc2[0]-$tc2[$n2]);
		scaleKey  -tp $tc2[$n2] -ts $s $aniC;
		}
		
}
